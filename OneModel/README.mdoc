OneModel
=========
OneModel is a MATLAB class which simplifies working with ODE models. The main objetive is to simplify the process of coding and simulating an ODE model, and therefore reducing the time spent in this task. With OneModel one can program ODE models from the symbolic equations and then simulate directly. This class provides also some functionality like OpenModelica (i.e. extendable classes, simulation of DAE models, etc).

Apart from that, OneModel provides us more classes for different tasks. For example, there is a class for mathematical analysis that can calculate equilibrium points, linearize the model, and calculate eigenvalues from the model defined in OneModel. On other hand, there is class for a contractivity test to check whether a model is contractive or no.

Lastly it is even possible to define OneModel models from chemical reactions directly and then perform QSSA analysis and simulate.

For more information please contact fersann1@upv.es

# Installation

Download this repository into the directory of your choice. Then within MATLAB go to `HOME/ENVIROMENT >> Set path` and add the directory of the repository and the `utils` and `parser` directories to the list (if they aren't already).

OneModel is developed for Matlab R2020b. OneModel was not tested to work in earlier versions of Matlab.

## Use the MATLAB syntax highlight with the .mc files

In `Preferences` go to `Editor/Debugger`. Then in `Language` in the box File extensions add `mc` as a new extension for MATLAB files.

# Table of contents

[TOC]

# Documentation

OneModel has a documentation manual placed in the following [link](doc/manual.pdf).

# General workflow

This section will explain the general workflow of using OneModel. An example will be presented to illustrate each of the steps of the workflow, and the code used in this example can be found in the following [link](./examples/ex0_readme).

## 1. Defining a model with the OneModel syntax

The first step is to code the information of the model we want to work with in the OneModel syntax. This syntax is similar to OpenModelica and it allows us to define a lot information about the model (variables, equations, comments, references, etc.). 

Therefore the first step is to create a file with the `.mc` extension (this is the extension used to defined OneModel models). This file will containg all the information of our model, and we have to use the OneModel syntax. In principle, the `.mc` files cannot have Matlab code but for avanced options it is posible to combina Matlab and OneModel syntax in the same `.mc` file.

The OneModel syntax consist on a set of predefined commands that will define some information in the model. The basic three commands are:  `parameter`, which defines a value that will not vary during simulation time; `variable`, which defines a value that could change during simulation time; and `equation`, which defines a relationship between parameters and variables. The `variable` can be defined as algebraic or as dynamic. The use of a command is typically as follows:

```
commandName name;
```

The `commandName` is the name of the command we want to use, `name` is the name we want to use for the object generated by the command and note that each command must finish with a `;`. 

For example:

```
parameter A;
```

This way we are using the command `parameter` to define an parameter for our model with the name `A`.

Some commands have the possibility to define options, using the following structure:

```
commandName name(opt1 = value1, opt2 = value2);
```

The option `opt1` will be set to the value `value1`, and note the `,` between different options. This way:

```
parameter A(value = 1.0);
```

, will create a parameter `A` and its `value` property will be set to `1.0`.

Everything written after a `%` until the next new line is considered as a comment.
This way the line `% Variables` will not define information of the model, but it will improve the readability of the model.
It is recommended to properly comment on the models.

For example, a OneModel model defined with this syntax will look something like this (./examples/ex0_readme/model.mc):

```MATLAB
@[](./examples/ex0_readme/model/model.mc)
```

and the models are initialized with the following function:

```sh exec --no-echo --no-code
rm ./examples/ex0_readme/build/model.m
```

```MATLAB exec --path ./examples/ex0_readme
@[ini=%% 1,end=%%](./examples/ex0_readme/main.m)
```

## 2. Simulate the OneModel model

Once we have a OneModel model it is easy to start simulating it. We need to pass a OneModel object of our model to the SimulationClass. Then we can configure the options for the simulation (e.g. parameters of the model, initial conditions, ODE configuration, which ODE solver to use, time span, ...). And finally we can use the functions for simulating and the SimulationClass will return a struct with the results of the simulation.

```MATLAB exec 
@[ini=%% 2,end=%%](./examples/ex0_readme/main.m)
```

## 3. Plot simulation results

The SimulatePlotClass simplifies the task of plotting the result of simulations. And if we define plot configuration in our OneModel, the PlotClass will use that information. This way do not need to provide it when plotting.

```MATLAB exec --no-echo
@[ini=%% 3,end=%%](./examples/ex0_readme/main.m)
```

<p align="center">
  <img width="850" src="./examples/ex0_readme/simulationPlot.png">
</p>

## 4. Generate an ODE function

We could use OneModel as our main workflow for working with models. However there are situations where we want to obtain a matlab ODE function (i.e. a function that calculates the derivatives of the model from the states). In this case, there is a functionality in the SimulationClass that generates the ODE function automatically for us. Also it can generate a driver script that simulates using the generated ODE function (this script could be used as a start template for using the ODE function).

With the following code you can generate the ODE function and the driver script:

```MATLAB 
@[ini=%% 4,end=%%](./examples/ex0_readme/main.m)

```

, the contents of the generated ODE funtion (./examples/ex0_readme/build/modelOdeFun.m) are:

```MATLAB
@[](./examples/ex0_readme/build/modelOdeFun.m)
```

and the content of the generated driver script (./examples/ex0_readme/driver/modelDriverOdeFun.m) are:

```MATLAB
@[](./examples/ex0_readme/build/modelDriverOdeFun.m)
```

Finally, we can simulate by executing the driver script.

## 5. Mathematical analysis

Work in progress.

## 6. Contractivity test

Work in progress.

## 7. Parser of OneModel models into LaTeX

Work in progress.

