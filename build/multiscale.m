classdef multiscale < OneModel
	% This code was generated by OneModel v0.5.2   -   Fernando NÃ³bel (fersann1@upv.es)
	methods
		function [obj] = multiscale(opts)
			if (strcmp(opts.cellModel, 'wildType'))

			obj.namespace = 'cellModel';

			p = ParameterClass(obj,'K_s');
			p.comment = 'Half activation threshold of growth rate.';
			p.units = 'g \cdot L^{-1}';
			p.value = 0.1802;
			p.nameTex = 'K_s';
			p.reference = '\cite{Zhuang2013}';
			obj.addParameter(p);

			p = ParameterClass(obj,'nu_max');
			p.value = 1260;
			p.units = 'aa \cdot min^{-1}';
			p.comment = 'Maximum effective translation rate per ribosome.';
			p.nameTex = '\nu_{max}';
			p.reference = '\cite{Milo2009}';
			obj.addParameter(p);

			p = ParameterClass(obj,'m_aa');
			p.value = 182.6e-9;
			p.units = 'fg \cdot aa^{-1}';
			p.comment = 'Average aminoacid mass.';
			p.nameTex = 'm_{aa}';
			p.reference = '\cite{Sundararaj2004}';
			p.valueTex = '$182.6 \cdot 10^{-9}$';
			obj.addParameter(p);

			p = ParameterClass(obj,'l_e');
			p.value = 25;
			p.units = 'aa';
			p.comment = 'Ribosome occupancy length.';
			p.nameTex = 'l_e';
			p.reference = 'estimated \cite{Fernandes2017,Eriksen2017,Picard2013,Siwiak2013}';
			obj.addParameter(p);

			p = ParameterClass(obj,'phi_t');
			p.value = 0.7796;
			p.units = 'adim';
			p.comment = 'Fraction of mature available ribosomes relative to the total.';
			p.nameTex = '\phi_t';
			p.reference = '\cite{doi:10.1111/febs.13258,Bremer:2008}*';
			obj.addParameter(p);

			p = ParameterClass(obj,'lp_r');
			p.value = 195;
			p.units = 'aa';
			p.comment = 'Mean length of ribosomal proteins.';
			p.nameTex = 'l_p^{r}';
			p.reference = 'calculated from \cite{Hausser2019}';
			obj.addParameter(p);

			p = ParameterClass(obj,'dm_r');
			p.value = 0.16;
			p.units = 'min^{-1}';
			p.comment = 'Mean degradation rate of ribosomal mRNA.';
			p.nameTex = 'd_m^{r}';
			p.reference = 'calculated from \cite{Hausser2019}';
			obj.addParameter(p);

			p = ParameterClass(obj,'ku_r');
			p.value = 135;
			p.range = [6 135];
			p.units = 'min^{-1}';
			p.comment = 'Dissotiation rate RBS-ribosome for ribosomal mRNA.';
			p.nameTex = 'k_u^{r}';
			p.reference = '\cite{nobel2020resources}*';
			obj.addParameter(p);

			p = ParameterClass(obj,'kb_r');
			p.value = 8.8530;
			p.range = [3 15];
			p.units = 'cell \cdot min^{-1} \cdot molec^{-1}';
			p.comment = 'Association rate RBS-ribosome for ribosomal mRNA.';
			p.nameTex = 'k_b^r';
			p.reference = '\cite{nobel2020resources}*';
			obj.addParameter(p);

			p = ParameterClass(obj,'N_r');
			p.value = 55;
			p.units = 'adim';
			p.comment = 'Number of proteins that make up a ribosome.';
			p.nameTex = 'N_r';
			p.reference = '\cite{nobel2020resources}';
			obj.addParameter(p);

			p = ParameterClass(obj,'omega_r');
			p.value = 4.8658;
			p.units = 'molec \cdot min^{-1} \cdot cell^{-1}';
			p.comment = 'Average transcription rate for ribosomal proteins.';
			p.nameTex = '\omega_r';
			p.reference = '\cite{nobel2020resources}*';
			obj.addParameter(p);

			p = ParameterClass(obj,'ribosomeWeight');
			p.value = 0.0045;
			p.units = 'fg';
			p.comment = 'Weight of a ribosome.';
			p.nameTex = 'r_w';
			p.reference = '\cite{Bremer:2008}';
			obj.addParameter(p);

			p = ParameterClass(obj,'lp_nr');
			p.value = 333;
			p.units = 'aa';
			p.comment = 'Mean length of non-ribosomal proteins.';
			p.nameTex = 'l_p^{nr}';
			p.reference = 'calculated from \cite{Hausser2019}';
			obj.addParameter(p);

			p = ParameterClass(obj,'dm_nr');
			p.value = 0.2;
			p.units = 'min^{-1}';
			p.comment = 'Mean degradation rate of non-ribosomal mRNA.';
			p.nameTex = 'd_m^{nr}';
			p.reference = 'calculated from \cite{Hausser2019}';
			obj.addParameter(p);

			p = ParameterClass(obj,'ku_nr');
			p.value = 6.1297;
			p.range = [6 135];
			p.units = 'min^{-1}';
			p.comment = 'Dissotiation rate RBS-ribosome for non-ribosomal mRNA.';
			p.nameTex = 'k_u^{nr}';
			p.reference = '\cite{nobel2020resources}*';
			obj.addParameter(p);

			p = ParameterClass(obj,'kb_nr');
			p.value = 14.9971;
			p.range = [3 15];
			p.units = 'cell \cdot min^{-1} \cdot molec^{-1}';
			p.comment = 'Association rate RBS-ribosome for non-ribosomal mRNA.';
			p.nameTex = 'k_b^{nr}';
			p.reference = '\cite{nobel2020resources}*';
			obj.addParameter(p);

			p = ParameterClass(obj,'N_nr');
			p.value = 1735;
			p.units = 'adim';
			p.comment = 'Number of non ribosomal proteins expressed at one time.';
			p.nameTex = 'N_{nr}';
			p.reference = '\cite{nobel2020resources}';
			obj.addParameter(p);

			p = ParameterClass(obj,'omega_nr');
			p.value = 0.03;
			p.units = 'molec \cdot min^{-1} \cdot cell^{-1}';
			p.comment = 'Average transcription rate for non ribosomal proteins.';
			p.nameTex = '\omega_{nr}';
			p.reference = '\cite{nobel2020resources}*';
			obj.addParameter(p);

			v = VariableClass(obj,'s');
			v.comment = 'Concentration of substrate in the biorreactor.';
			v.units = 'g \cdot L^{-1}';
			v.title = 'Substrate concentration $s$';
			v.isTex = false;
			obj.addVariable(v);

			v = VariableClass(obj,'m_p');
			v.units = 'fg \cdot cell^{-1}';
			v.comment = 'Total protein mass of the cell.';
			v.title = 'Cell mass';
			v.nameTex = 'm_p';
			v.isTex = false;
			obj.addVariable(v);

			v = VariableClass(obj,'nu');
			v.isSubstitution=true;
			e = EquationClass(obj,'nu_eq');
			e.eqn = 'nu ==  nu_max*s/(s+K_s)';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.units = 'aa \cdot min^{-1}';
			v.comment = 'Effective translation rate per ribosome.';
			v.title = '$\nu(s)$';
			v.nameTex = '\nu(s)';
			v.equationTex = '\nu(s) = \nu_{max} s / (s+K_s)';
			obj.addVariable(v);

			v = VariableClass(obj,'mu');
			v.start = 0.01;
			v.units = 'min^{-1}';
			v.comment = 'Specific cell growth rate.';
			v.title='Specifi cell growth rate.';
			v.ylabel='[min$^{-1}$]';
			v.ylim = [0 0.03];
			v.nameTex = '\mu';
			v.equationTex = '\mu &= \frac{m_{aa}}{m_p(\mu)} \nu(s) \phi_b(\mu,r,s) \phi_t r_t(m_r)';
			obj.addVariable(v);

			v = VariableClass(obj,'ke');
			v.isSubstitution=true;
			e = EquationClass(obj,'ke_eq');
			e.eqn = 'ke ==  nu/l_e';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.units = 'min^{-1}';
			v.comment = 'Translation initation rate.';
			v.isPlot = false;
			v.nameTex = 'k_e(s)';
			v.equationTex = 'k_e(s) = \nu(s) / l_e';
			obj.addVariable(v);

			v = VariableClass(obj,'m_sum');
			v.isSubstitution=true;
			e = EquationClass(obj,'m_sum_eq');
			e.eqn = 'm_sum ==  m_r + m_nr';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.units = 'fg \cdot cell^{-1}';
			v.comment = 'Total protein mass calculated from the mass of individual proteins in the cell';
			v.title = 'm$_{sum}$';
			v.plotIn = 'cellModel__m_p';
			v.isPlot = false;
			v.isTex = false;
			obj.addVariable(v);

			v = VariableClass(obj,'J_sum');
			v.isSubstitution=true;
			e = EquationClass(obj,'J_sum_eq');
			e.eqn = 'J_sum ==  N_r*J_r + N_nr*J_nr';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.units = 'adim';
			v.comment = 'Total sum of all the J in the cell.';
			v.title = '$J_{sum}$';
			v.nameTex = 'J_{sum}(\mu,r,s)';
			v.equationTex = 'J_{sum}(\mu,r,s) = \sum_{i=r,nr,A} N_i J_i(\mu,r,s)';
			obj.addVariable(v);

			v = VariableClass(obj,'KkC0_r');
			v.isSubstitution=true;
			e = EquationClass(obj,'KkC0_r_eq');
			e.eqn = 'KkC0_r ==  kb_r/(ku_r+ke)';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.units = 'cell \cdot molec^{-1}';
			v.comment = 'Effective RBS affinity of ribosomal mRNA.';
			v.isPlot = false;
			v.nameTex = 'K^r_{C_0}(s)';
			v.equationTex = 'K^r_{C_0}(s) = k_b^r/(k_u^r + k_e(s))';
			obj.addVariable(v);

			v = VariableClass(obj,'Emk_r');
			v.isSubstitution=true;
			e = EquationClass(obj,'Emk_r_eq');
			e.eqn = 'Emk_r ==  0.62*lp_r/l_e';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.units = 'adim';
			v.comment = 'Ribosomes density related term for ribsomal mRNA.';
			v.isPlot = false;
			v.nameTex = 'E_{m}^r';
			v.equationTex = 'E_m^r = 0.62 l_p^r / l_e';
			obj.addVariable(v);

			v = VariableClass(obj,'J_r');
			v.isSubstitution=true;
			e = EquationClass(obj,'J_r_eq');
			e.eqn = 'J_r ==  Emk_r*omega_r/(dm_r/KkC0_r+mu*r)';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.units = 'adim';
			v.comment = 'Average J value of one ribosomal \textit{E.coli.} gene.';
			v.title = '$J_r$';
			v.nameTex = 'J_r(\mu,r,s)';
			v.equationTex = 'J_r(\mu,r,s) = E_m^r \omega_r / (d_m^r/K^r_{C_0}(s) + \mu r)';
			obj.addVariable(v);

			v = VariableClass(obj,'r_t');
			v.isSubstitution=true;
			e = EquationClass(obj,'r_t_eq');
			e.eqn = 'r_t ==  m_r/ribosomeWeight';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.units = 'molec \cdot cell^{-1}';
			v.comment = 'Number of mature and inmmature ribosomes.';
			v.title = 'r$_t$';
			v.isPlot = false;
			v.nameTex = 'r_t(m_r)';
			v.equationTex = 'r_t(m_r) = m_r/r_w';
			obj.addVariable(v);

			v = VariableClass(obj,'phi_b');
			v.isSubstitution=true;
			e = EquationClass(obj,'phi_b_eq');
			e.eqn = 'phi_b ==  J_sum/(1+J_sum)';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.units = 'adim';
			v.comment = 'Fraction of translating ribosomes of $\phi_t r_t(m_r)$.';
			v.title = '$\phi_b$';
			v.isPlot = false;
			v.nameTex = '\phi_b(\mu,r,s)';
			v.equationTex = '\phi_b(\mu,r,s) = J_{sum}(\mu,r,s)/(1 + J_{sum}(\mu,r,s))';
			obj.addVariable(v);

			v = VariableClass(obj,'r');
			v.start = 350;
			v.units = 'molec \cdot cell^{-1}';
			v.comment = 'Free mature ribosomes in the cell.';
			v.title = 'r';
			v.nameTex = 'r';
			v.equationTex = 'r &= \frac{\phi_t r_t(m_r)}{1+J_{sum}(\mu,r,s)}';
			obj.addVariable(v);

			v = VariableClass(obj,'m_r');
			v.start = 10;
			v.units = 'fg \cdot cell^{-1}';
			v.comment = 'Total mass of ribosomal proteins in the cell.';
			v.title = 'm$_r$';
			v.nameTex = 'm_r';
			v.equationTex = '\dot m_r &= \left[m_p(\mu) \frac{N_r J_r(\mu,r,s)}{J_{sum}(\mu,r,s)} - m_r \right] \mu';
			obj.addVariable(v);

			v = VariableClass(obj,'KkC0_nr');
			v.isSubstitution=true;
			e = EquationClass(obj,'KkC0_nr_eq');
			e.eqn = 'KkC0_nr ==  kb_nr/(ku_nr+ke)';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.units = 'cell \cdot molec^{-1}';
			v.comment = 'Effective RBS affinity of non-ribosomal mRNA.';
			v.isPlot = false;
			v.nameTex = 'K^{nr}_{C_0}(s)';
			v.equationTex = 'K^{nr}_{C_0} = k_b^{nr}/(k_u^{nr} + k_e(s))';
			obj.addVariable(v);

			v = VariableClass(obj,'Emk_nr');
			v.isSubstitution=true;
			e = EquationClass(obj,'Emk_nr_eq');
			e.eqn = 'Emk_nr ==  0.62*lp_nr/l_e';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.units = 'adim';
			v.comment = 'Ribosomes density related term for non-ribsomal mRNA.';
			v.isPlot = false;
			v.nameTex = 'E_{m}^{nr}';
			v.equationTex = 'E_{m}^{nr} = 0.62 l_p^{nr} / l_e';
			obj.addVariable(v);

			v = VariableClass(obj,'J_nr');
			v.isSubstitution=true;
			e = EquationClass(obj,'J_nr_eq');
			e.eqn = 'J_nr ==  Emk_nr*omega_nr/(dm_nr/KkC0_nr+mu*r)';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.units = 'adim';
			v.comment = 'Average J value of one non-ribosomal \textit{E.coli.} gene.';
			v.title = '$J_{nr}$';
			v.nameTex = 'J_{nr}(\mu,r,s)';
			v.equationTex = 'J_{nr}(\mu,r,s) = E_m^{nr} \omega_{nr} / (d_m^{nr}/K_{C_0}^{nr}(s) + \mu r)';
			obj.addVariable(v);

			v = VariableClass(obj,'m_nr');
			v.start = 10;
			v.units = 'fg \cdot cell^{-1}';
			v.comment = 'Total mass of non ribosomal proteins in the cell.';
			v.title = 'm$_{nr}$';
			v.nameTex = 'm_{nr}';
			v.equationTex = '\dot m_{nr} &= \left[m_p(\mu) \frac{N_{nr} J_{nr}(\mu,r,s)}{J_{sum}(\mu,r,s)} - m_{nr}\right] \mu';
			obj.addVariable(v);

			e = EquationClass(obj,'');
			e.eqn = 'r == phi_t*r_t/(1+J_sum)';
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'mu == m_aa/m_p*nu*phi_b*phi_t*r_t';
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'der_m_r == (m_p*N_r*J_r/J_sum - m_r)*mu';
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'der_m_nr == (m_p*N_nr*J_nr/J_sum - m_nr)*mu';
			obj.addEquation(e);

			obj.namespace = '';


			end

			if (strcmp(opts.cellModel, 'oneProtein'))

			obj.namespace = 'cellModel';

			p = ParameterClass(obj,'K_s');
			p.comment = 'Half activation threshold of growth rate.';
			p.units = 'g \cdot L^{-1}';
			p.value = 0.1802;
			p.nameTex = 'K_s';
			p.reference = '\cite{Zhuang2013}';
			obj.addParameter(p);

			p = ParameterClass(obj,'nu_max');
			p.value = 1260;
			p.units = 'aa \cdot min^{-1}';
			p.comment = 'Maximum effective translation rate per ribosome.';
			p.nameTex = '\nu_{max}';
			p.reference = '\cite{Milo2009}';
			obj.addParameter(p);

			p = ParameterClass(obj,'m_aa');
			p.value = 182.6e-9;
			p.units = 'fg \cdot aa^{-1}';
			p.comment = 'Average aminoacid mass.';
			p.nameTex = 'm_{aa}';
			p.reference = '\cite{Sundararaj2004}';
			p.valueTex = '$182.6 \cdot 10^{-9}$';
			obj.addParameter(p);

			p = ParameterClass(obj,'l_e');
			p.value = 25;
			p.units = 'aa';
			p.comment = 'Ribosome occupancy length.';
			p.nameTex = 'l_e';
			p.reference = 'estimated \cite{Fernandes2017,Eriksen2017,Picard2013,Siwiak2013}';
			obj.addParameter(p);

			p = ParameterClass(obj,'phi_t');
			p.value = 0.7796;
			p.units = 'adim';
			p.comment = 'Fraction of mature available ribosomes relative to the total.';
			p.nameTex = '\phi_t';
			p.reference = '\cite{doi:10.1111/febs.13258,Bremer:2008}*';
			obj.addParameter(p);

			p = ParameterClass(obj,'lp_r');
			p.value = 195;
			p.units = 'aa';
			p.comment = 'Mean length of ribosomal proteins.';
			p.nameTex = 'l_p^{r}';
			p.reference = 'calculated from \cite{Hausser2019}';
			obj.addParameter(p);

			p = ParameterClass(obj,'dm_r');
			p.value = 0.16;
			p.units = 'min^{-1}';
			p.comment = 'Mean degradation rate of ribosomal mRNA.';
			p.nameTex = 'd_m^{r}';
			p.reference = 'calculated from \cite{Hausser2019}';
			obj.addParameter(p);

			p = ParameterClass(obj,'ku_r');
			p.value = 135;
			p.range = [6 135];
			p.units = 'min^{-1}';
			p.comment = 'Dissotiation rate RBS-ribosome for ribosomal mRNA.';
			p.nameTex = 'k_u^{r}';
			p.reference = '\cite{nobel2020resources}*';
			obj.addParameter(p);

			p = ParameterClass(obj,'kb_r');
			p.value = 8.8530;
			p.range = [3 15];
			p.units = 'cell \cdot min^{-1} \cdot molec^{-1}';
			p.comment = 'Association rate RBS-ribosome for ribosomal mRNA.';
			p.nameTex = 'k_b^r';
			p.reference = '\cite{nobel2020resources}*';
			obj.addParameter(p);

			p = ParameterClass(obj,'N_r');
			p.value = 55;
			p.units = 'adim';
			p.comment = 'Number of proteins that make up a ribosome.';
			p.nameTex = 'N_r';
			p.reference = '\cite{nobel2020resources}';
			obj.addParameter(p);

			p = ParameterClass(obj,'omega_r');
			p.value = 4.8658;
			p.units = 'molec \cdot min^{-1} \cdot cell^{-1}';
			p.comment = 'Average transcription rate for ribosomal proteins.';
			p.nameTex = '\omega_r';
			p.reference = '\cite{nobel2020resources}*';
			obj.addParameter(p);

			p = ParameterClass(obj,'ribosomeWeight');
			p.value = 0.0045;
			p.units = 'fg';
			p.comment = 'Weight of a ribosome.';
			p.nameTex = 'r_w';
			p.reference = '\cite{Bremer:2008}';
			obj.addParameter(p);

			p = ParameterClass(obj,'lp_nr');
			p.value = 333;
			p.units = 'aa';
			p.comment = 'Mean length of non-ribosomal proteins.';
			p.nameTex = 'l_p^{nr}';
			p.reference = 'calculated from \cite{Hausser2019}';
			obj.addParameter(p);

			p = ParameterClass(obj,'dm_nr');
			p.value = 0.2;
			p.units = 'min^{-1}';
			p.comment = 'Mean degradation rate of non-ribosomal mRNA.';
			p.nameTex = 'd_m^{nr}';
			p.reference = 'calculated from \cite{Hausser2019}';
			obj.addParameter(p);

			p = ParameterClass(obj,'ku_nr');
			p.value = 6.1297;
			p.range = [6 135];
			p.units = 'min^{-1}';
			p.comment = 'Dissotiation rate RBS-ribosome for non-ribosomal mRNA.';
			p.nameTex = 'k_u^{nr}';
			p.reference = '\cite{nobel2020resources}*';
			obj.addParameter(p);

			p = ParameterClass(obj,'kb_nr');
			p.value = 14.9971;
			p.range = [3 15];
			p.units = 'cell \cdot min^{-1} \cdot molec^{-1}';
			p.comment = 'Association rate RBS-ribosome for non-ribosomal mRNA.';
			p.nameTex = 'k_b^{nr}';
			p.reference = '\cite{nobel2020resources}*';
			obj.addParameter(p);

			p = ParameterClass(obj,'N_nr');
			p.value = 1735;
			p.units = 'adim';
			p.comment = 'Number of non ribosomal proteins expressed at one time.';
			p.nameTex = 'N_{nr}';
			p.reference = '\cite{nobel2020resources}';
			obj.addParameter(p);

			p = ParameterClass(obj,'omega_nr');
			p.value = 0.03;
			p.units = 'molec \cdot min^{-1} \cdot cell^{-1}';
			p.comment = 'Average transcription rate for non ribosomal proteins.';
			p.nameTex = '\omega_{nr}';
			p.reference = '\cite{nobel2020resources}*';
			obj.addParameter(p);

			v = VariableClass(obj,'s');
			v.comment = 'Concentration of substrate in the biorreactor.';
			v.units = 'g \cdot L^{-1}';
			v.title = 'Substrate concentration $s$';
			v.isTex = false;
			obj.addVariable(v);

			v = VariableClass(obj,'m_p');
			v.units = 'fg \cdot cell^{-1}';
			v.comment = 'Total protein mass of the cell.';
			v.title = 'Cell mass';
			v.nameTex = 'm_p';
			v.isTex = false;
			obj.addVariable(v);

			v = VariableClass(obj,'nu');
			v.isSubstitution=true;
			e = EquationClass(obj,'nu_eq');
			e.eqn = 'nu ==  nu_max*s/(s+K_s)';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.units = 'aa \cdot min^{-1}';
			v.comment = 'Effective translation rate per ribosome.';
			v.title = '$\nu(s)$';
			v.nameTex = '\nu(s)';
			v.equationTex = '\nu(s) = \nu_{max} s / (s+K_s)';
			obj.addVariable(v);

			v = VariableClass(obj,'mu');
			v.start = 0.01;
			v.units = 'min^{-1}';
			v.comment = 'Specific cell growth rate.';
			v.title='Specifi cell growth rate.';
			v.ylabel='[min$^{-1}$]';
			v.ylim = [0 0.03];
			v.nameTex = '\mu';
			v.equationTex = '\mu &= \frac{m_{aa}}{m_p(\mu)} \nu(s) \phi_b(\mu,r,s) \phi_t r_t(m_r)';
			obj.addVariable(v);

			v = VariableClass(obj,'ke');
			v.isSubstitution=true;
			e = EquationClass(obj,'ke_eq');
			e.eqn = 'ke ==  nu/l_e';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.units = 'min^{-1}';
			v.comment = 'Translation initation rate.';
			v.isPlot = false;
			v.nameTex = 'k_e(s)';
			v.equationTex = 'k_e(s) = \nu(s) / l_e';
			obj.addVariable(v);

			v = VariableClass(obj,'m_sum');
			v.isSubstitution=true;
			e = EquationClass(obj,'m_sum_eq');
			e.eqn = 'm_sum ==  m_r + m_nr';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.units = 'fg \cdot cell^{-1}';
			v.comment = 'Total protein mass calculated from the mass of individual proteins in the cell';
			v.title = 'm$_{sum}$';
			v.plotIn = 'cellModel__m_p';
			v.isPlot = false;
			v.isTex = false;
			obj.addVariable(v);

			v = VariableClass(obj,'J_sum');
			v.isSubstitution=true;
			e = EquationClass(obj,'J_sum_eq');
			e.eqn = 'J_sum ==  N_r*J_r + N_nr*J_nr';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.units = 'adim';
			v.comment = 'Total sum of all the J in the cell.';
			v.title = '$J_{sum}$';
			v.nameTex = 'J_{sum}(\mu,r,s)';
			v.equationTex = 'J_{sum}(\mu,r,s) = \sum_{i=r,nr,A} N_i J_i(\mu,r,s)';
			obj.addVariable(v);

			v = VariableClass(obj,'KkC0_r');
			v.isSubstitution=true;
			e = EquationClass(obj,'KkC0_r_eq');
			e.eqn = 'KkC0_r ==  kb_r/(ku_r+ke)';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.units = 'cell \cdot molec^{-1}';
			v.comment = 'Effective RBS affinity of ribosomal mRNA.';
			v.isPlot = false;
			v.nameTex = 'K^r_{C_0}(s)';
			v.equationTex = 'K^r_{C_0}(s) = k_b^r/(k_u^r + k_e(s))';
			obj.addVariable(v);

			v = VariableClass(obj,'Emk_r');
			v.isSubstitution=true;
			e = EquationClass(obj,'Emk_r_eq');
			e.eqn = 'Emk_r ==  0.62*lp_r/l_e';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.units = 'adim';
			v.comment = 'Ribosomes density related term for ribsomal mRNA.';
			v.isPlot = false;
			v.nameTex = 'E_{m}^r';
			v.equationTex = 'E_m^r = 0.62 l_p^r / l_e';
			obj.addVariable(v);

			v = VariableClass(obj,'J_r');
			v.isSubstitution=true;
			e = EquationClass(obj,'J_r_eq');
			e.eqn = 'J_r ==  Emk_r*omega_r/(dm_r/KkC0_r+mu*r)';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.units = 'adim';
			v.comment = 'Average J value of one ribosomal \textit{E.coli.} gene.';
			v.title = '$J_r$';
			v.nameTex = 'J_r(\mu,r,s)';
			v.equationTex = 'J_r(\mu,r,s) = E_m^r \omega_r / (d_m^r/K^r_{C_0}(s) + \mu r)';
			obj.addVariable(v);

			v = VariableClass(obj,'r_t');
			v.isSubstitution=true;
			e = EquationClass(obj,'r_t_eq');
			e.eqn = 'r_t ==  m_r/ribosomeWeight';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.units = 'molec \cdot cell^{-1}';
			v.comment = 'Number of mature and inmmature ribosomes.';
			v.title = 'r$_t$';
			v.isPlot = false;
			v.nameTex = 'r_t(m_r)';
			v.equationTex = 'r_t(m_r) = m_r/r_w';
			obj.addVariable(v);

			v = VariableClass(obj,'phi_b');
			v.isSubstitution=true;
			e = EquationClass(obj,'phi_b_eq');
			e.eqn = 'phi_b ==  J_sum/(1+J_sum)';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.units = 'adim';
			v.comment = 'Fraction of translating ribosomes of $\phi_t r_t(m_r)$.';
			v.title = '$\phi_b$';
			v.isPlot = false;
			v.nameTex = '\phi_b(\mu,r,s)';
			v.equationTex = '\phi_b(\mu,r,s) = J_{sum}(\mu,r,s)/(1 + J_{sum}(\mu,r,s))';
			obj.addVariable(v);

			v = VariableClass(obj,'r');
			v.start = 350;
			v.units = 'molec \cdot cell^{-1}';
			v.comment = 'Free mature ribosomes in the cell.';
			v.title = 'r';
			v.nameTex = 'r';
			v.equationTex = 'r &= \frac{\phi_t r_t(m_r)}{1+J_{sum}(\mu,r,s)}';
			obj.addVariable(v);

			v = VariableClass(obj,'m_r');
			v.start = 10;
			v.units = 'fg \cdot cell^{-1}';
			v.comment = 'Total mass of ribosomal proteins in the cell.';
			v.title = 'm$_r$';
			v.nameTex = 'm_r';
			v.equationTex = '\dot m_r &= \left[m_p(\mu) \frac{N_r J_r(\mu,r,s)}{J_{sum}(\mu,r,s)} - m_r \right] \mu';
			obj.addVariable(v);

			v = VariableClass(obj,'KkC0_nr');
			v.isSubstitution=true;
			e = EquationClass(obj,'KkC0_nr_eq');
			e.eqn = 'KkC0_nr ==  kb_nr/(ku_nr+ke)';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.units = 'cell \cdot molec^{-1}';
			v.comment = 'Effective RBS affinity of non-ribosomal mRNA.';
			v.isPlot = false;
			v.nameTex = 'K^{nr}_{C_0}(s)';
			v.equationTex = 'K^{nr}_{C_0} = k_b^{nr}/(k_u^{nr} + k_e(s))';
			obj.addVariable(v);

			v = VariableClass(obj,'Emk_nr');
			v.isSubstitution=true;
			e = EquationClass(obj,'Emk_nr_eq');
			e.eqn = 'Emk_nr ==  0.62*lp_nr/l_e';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.units = 'adim';
			v.comment = 'Ribosomes density related term for non-ribsomal mRNA.';
			v.isPlot = false;
			v.nameTex = 'E_{m}^{nr}';
			v.equationTex = 'E_{m}^{nr} = 0.62 l_p^{nr} / l_e';
			obj.addVariable(v);

			v = VariableClass(obj,'J_nr');
			v.isSubstitution=true;
			e = EquationClass(obj,'J_nr_eq');
			e.eqn = 'J_nr ==  Emk_nr*omega_nr/(dm_nr/KkC0_nr+mu*r)';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.units = 'adim';
			v.comment = 'Average J value of one non-ribosomal \textit{E.coli.} gene.';
			v.title = '$J_{nr}$';
			v.nameTex = 'J_{nr}(\mu,r,s)';
			v.equationTex = 'J_{nr}(\mu,r,s) = E_m^{nr} \omega_{nr} / (d_m^{nr}/K_{C_0}^{nr}(s) + \mu r)';
			obj.addVariable(v);

			v = VariableClass(obj,'m_nr');
			v.start = 10;
			v.units = 'fg \cdot cell^{-1}';
			v.comment = 'Total mass of non ribosomal proteins in the cell.';
			v.title = 'm$_{nr}$';
			v.nameTex = 'm_{nr}';
			v.equationTex = '\dot m_{nr} &= \left[m_p(\mu) \frac{N_{nr} J_{nr}(\mu,r,s)}{J_{sum}(\mu,r,s)} - m_{nr}\right] \mu';
			obj.addVariable(v);

			e = EquationClass(obj,'');
			e.eqn = 'r == phi_t*r_t/(1+J_sum)';
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'mu == m_aa/m_p*nu*phi_b*phi_t*r_t';
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'der_m_r == (m_p*N_r*J_r/J_sum - m_r)*mu';
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'der_m_nr == (m_p*N_nr*J_nr/J_sum - m_nr)*mu';
			obj.addEquation(e);

			p = ParameterClass(obj,'lp_A');
			p.value = 195;
			p.units = 'aa';
			p.comment = 'Length of protein A.';
			p.nameTex = 'l_p^A';
			p.reference = '**';
			obj.addParameter(p);

			p = ParameterClass(obj,'dm_A');
			p.value = 0.16;
			p.units = 'min^{-1}';
			p.comment = 'Mean degradation rate of protein A mRNA.';
			p.nameTex = 'd_m^A';
			p.reference = '**';
			obj.addParameter(p);

			p = ParameterClass(obj,'ku_A');
			p.value = 117.2305;
			p.range = [6 135];
			p.units = 'min^{-1}';
			p.comment = 'Dissotiation rate RBS-ribosome for protein A mRNA.';
			p.nameTex = 'k_u^A';
			p.valueTex = '[6 135]';
			p.reference = '\cite{deSmit2003,Kierzek2001}';
			obj.addParameter(p);

			p = ParameterClass(obj,'kb_A');
			p.value = 5.1754;
			p.range = [3 15];
			p.units = 'cell \cdot min^{-1} \cdot molec^{-1}';
			p.comment = 'Association rate RBS-ribosome for protein A mRNA.';
			p.nameTex = 'k_b^A';
			p.valueTex = '[3 15]';
			p.reference = '\cite{deSmit2003,Kierzek2001,SALIS201119}';
			obj.addParameter(p);

			p = ParameterClass(obj,'N_A');
			p.value = 1;
			p.units = 'adim';
			p.comment = 'Number of copies of gene $A$.';
			p.nameTex = 'N_A';
			p.valueTex = '[1 70]';
			p.reference = '**';
			obj.addParameter(p);

			p = ParameterClass(obj,'omega_A');
			p.value = 10;
			p.units = 'molec \cdot min^{-1} \cdot cell^{-1}';
			p.comment = 'Average transcription rate for protein $A$.';
			p.nameTex = '\omega_A';
			p.valueTex = '[0 5]';
			p.reference = '**';
			obj.addParameter(p);

			v = VariableClass(obj,'KkC0_A');
			v.isSubstitution=true;
			e = EquationClass(obj,'KkC0_A_eq');
			e.eqn = 'KkC0_A ==  kb_A/(ku_A+ke)';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.units = 'cell \cdot molec^{-1}';
			v.comment = 'Effective RBS affinity of protein A mRNA.';
			v.isPlot = false;
			v.nameTex = 'K^A_{C_0}(s)';
			v.equationTex = 'K^A_{C_0}(s) = k_b^A /(k_u^A + k_e(s))';
			obj.addVariable(v);

			v = VariableClass(obj,'Emk_A');
			v.isSubstitution=true;
			e = EquationClass(obj,'Emk_A_eq');
			e.eqn = 'Emk_A ==  0.62*lp_A/l_e';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.units = 'adim';
			v.comment = 'Ribosomes density related term for protein A mRNA.';
			v.isPlot = false;
			v.nameTex = 'E_m^A';
			v.equationTex = 'E_m^A = 0.62 l_p^A/l_e';
			obj.addVariable(v);

			v = VariableClass(obj,'J_A');
			v.isSubstitution=true;
			e = EquationClass(obj,'J_A_eq');
			e.eqn = 'J_A ==  Emk_A*omega_A/(dm_A/KkC0_A+mu*r)';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.units = 'adim';
			v.comment = 'Average J value of one protein A gene.';
			v.title = '$J_A$';
			v.nameTex = 'J_A(\mu,r,s)';
			v.equationTex = 'J_A(\mu,r,s) = E_m^A \omega_A / (d_m^A/K_{C_0}^A(s) + \mu r)';
			obj.addVariable(v);

			v = VariableClass(obj,'m_A');
			v.start = 0;
			v.units = 'fg \cdot cell^{-1}';
			v.comment = 'Total mass of protein $A$ in the cell.';
			v.title = 'm$_A$';
			v.nameTex = 'm_A';
			v.equationTex = '\dot m_A &= \left[m_p(\mu) \frac{N_A J_A(\mu,r,s)}{J_{sum}(\mu,r,s)} - m_A \right] \mu';
			obj.addVariable(v);

			e = EquationClass(obj,'');
			e.eqn = 'der_m_A == (m_p*N_A*J_A/J_sum - m_A)*mu';
			obj.addEquation(e);

			obj.getModelPartByName('m_sum_eq').eqn = 'm_sum == m_r + m_nr + m_A';

			obj.getModelPartByName('J_sum_eq').eqn = 'J_sum == N_r*J_r + N_nr*J_nr + N_A*J_A';

			obj.namespace = '';


			end

			if (strcmp(opts.massEq, 'interpolated'))

			obj.namespace = 'mass';

			v = VariableClass(obj,'mu');
			v.units = '1/min';
			v.comment = 'Growth rate.';
			v.isPlot = false;
			v.isTex = false;
			obj.addVariable(v);

			p = ParameterClass(obj,'c_1');
			p.value = 239089;
			p.units = 'fg \cdot cell^{-1} \cdot min^2';
			p.comment = 'First coefficient of mass equation.';
			p.nameTex = 'c_1';
			p.reference = '\cite{nobel2020resources}*';
			obj.addParameter(p);

			p = ParameterClass(obj,'c_2');
			p.value = 7432;
			p.units = 'fg \cdot cell^{-1} \cdot min';
			p.comment = 'Second coefficient of mass equation.';
			p.nameTex = 'c_2';
			p.reference = '\cite{nobel2020resources}*';
			obj.addParameter(p);

			p = ParameterClass(obj,'c_3');
			p.value = 37.06;
			p.units = 'fg \cdot cell^{-1}';
			p.comment = 'Third coefficient of mass equation.';
			p.nameTex = 'c_3';
			p.reference = '\cite{nobel2020resources}*';
			obj.addParameter(p);

			v = VariableClass(obj,'m_p');
			v.units = 'fg \cdot cell^{-1}';
			v.comment = 'Total protein mass of the cell.';
			v.isPlot = false;
			v.nameTex = 'm_p(\mu)';
			v.equationTex = 'm_p(\mu) = c_1 \mu^2 + c_2 \mu + c_3';
			v.isSubstitution = true;
			obj.addVariable(v);

			e = EquationClass(obj,'');
			e.eqn = 'm_p == c_1*mu*mu + c_2*mu + c_3';
			e.isSubstitution = true;
			obj.addEquation(e);

			obj.namespace = '';


			e = EquationClass(obj,'');
			e.eqn = 'mass__mu == cellModel__mu';
			e.isSubstitution = true;
			obj.addEquation(e);

			end

			if (strcmp(opts.massEq, 'eq_jesus'))

			obj.namespace = 'mass';

			v = VariableClass(obj,'mu');
			v.units = '1/min';
			v.comment = 'Growth rate.';
			v.isPlot = false;
			obj.addVariable(v);

			p = ParameterClass(obj,'mp_mp0');
			p.value = 77.3748;
			p.units = 'g';
			obj.addParameter(p);

			p = ParameterClass(obj,'mp_beta');
			p.value = 61.7813;
			p.units = 'min';
			obj.addParameter(p);

			v = VariableClass(obj,'m_p');
			v.units = 'fg';
			v.comment = 'Total protein mass of the cell.';
			v.isPlot = false;
			obj.addVariable(v);

			e = EquationClass(obj,'');
			e.eqn = 'm_p == mp_mp0*exp(mp_beta*mu)';
			e.isSubstitution = true;
			obj.addEquation(e);

			obj.namespace = '';


			e = EquationClass(obj,'');
			e.eqn = 'mass__mu == cellModel__mu';
			e.isSubstitution = true;
			obj.addEquation(e);

			end

			if (strcmp(opts.massEq, 'fix'))

			p = ParameterClass(obj,'mass__m_p');
			p.value = 450;
			p.isTex = false;
			obj.addParameter(p);

			end

			e = EquationClass(obj,'');
			e.eqn = 'cellModel__m_p == mass__m_p';
			e.isSubstitution = true;
			obj.addEquation(e);

			if (strcmp(opts.bioreactor, 'nuFix'))

			p = ParameterClass(obj,'bio__nu');
			p.value = 1260;
			obj.addParameter(p);

			obj.getModelPartByName('cellModel__nu_eq').eqn = 'cellModel__nu ==  bio__nu';

			e = EquationClass(obj,'');
			e.eqn = 'cellModel__s == 0';
			e.isSubstitution = true;
			obj.addEquation(e);

			end

			if (strcmp(opts.bioreactor, 'substrateFix'))

			p = ParameterClass(obj,'bio__s');
			p.value = 3.6;
			obj.addParameter(p);

			e = EquationClass(obj,'');
			e.eqn = 'cellModel__s == bio__s';
			e.isSubstitution = true;
			obj.addEquation(e);

			end

			if (strcmp(opts.bioreactor, 'batch'))

			obj.namespace = 'bio';

			v = VariableClass(obj,'m_p');
			v.units = 'fg';
			v.comment = 'Total protein mass of the cell.';
			v.isPlot = false;
			v.isTex = false;
			obj.addVariable(v);

			v = VariableClass(obj,'mu');
			v.units = '1/min';
			v.comment = 'Growth rate.';
			v.title='Growth rate';
			v.ylabel='[min$^{-1}$]';
			v.ylim = [0 0.03];
			v.isTex = false;
			obj.addVariable(v);

			v = VariableClass(obj,'F_in');
			v.comment = 'Input media flux.';
			v.units = 'L \cdot min^{-1}';
			v.isPlot = false;
			v.nameTex = 'F_{in}';
			obj.addVariable(v);

			v = VariableClass(obj,'F_out');
			v.comment = 'Output waste flux.';
			v.units = 'L \cdot min^{-1}';
			v.isPlot = false;
			v.nameTex = 'F_{out}';
			obj.addVariable(v);

			p = ParameterClass(obj,'y');
			p.comment = 'Biomass yield on glucose.';
			p.units = 'g^{ }_{biomass} \cdot g^{-1}_{substrate}';
			p.value = 0.45;
			p.nameTex = 'y';
			p.reference = '\cite{Link2008}';
			obj.addParameter(p);

			p = ParameterClass(obj,'s_f');
			p.comment = 'Fresh media substrate concentration.';
			p.units = 'g \cdot L^{-1}';
			p.value = 3.6;
			p.nameTex = 's_{feed}';
			p.reference = '\cite{Zhuang2013}';
			obj.addParameter(p);

			p = ParameterClass(obj,'nOD');
			p.comment = 'Concentration of E.Coli. cells in 1 OD (Optical density).';
			p.units = 'cell \cdot L^{-1}';
			p.value = 1e12;
			p.nameTex = 'n_{OD}';
			p.valueTex = '1e12';
			p.isTex = false;
			obj.addParameter(p);

			v = VariableClass(obj,'V');
			v.comment = 'Volume of culture in the biorreactor.';
			v.units = 'L';
			v.start = 1;
			v.title = 'Volume';
			v.nameTex = 'V';
			v.equationTex =  '\dot V &= F_{in} - F_{out}';
			obj.addVariable(v);

			v = VariableClass(obj,'V_feed');
			v.units = 'L';
			v.comment = 'Total volume feeded to the bioreactor.';
			v.title = '$V_{feed}$';
			v.isTex = false;
			obj.addVariable(v);

			v = VariableClass(obj,'V_out');
			v.units = 'L';
			v.comment = 'Total volume removed from the bioreactor.';
			v.title = '$V_{out}$';
			v.isTex = false;
			obj.addVariable(v);

			v = VariableClass(obj,'N');
			v.comment = 'Concentration of cells in the biorreactor.';
			v.units = 'cell \cdot L^{-1}';
			v.title = 'Concentration of cells $n$';
			v.start = 5e10;
			v.nameTex = 'n';
			v.equationTex = '\dot n &= \mu n - \frac{F_{in}}{V} n';
			obj.addVariable(v);

			v = VariableClass(obj,'x');
			v.comment = 'Concentration of biomass in the biorreactor.';
			v.units = 'g/L';
			v.isSubstitution=true;
			e = EquationClass(obj,'x_eq');
			e.eqn = 'x ==  N*m_p*1e-15';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.title = 'Biomass concentration $x$';
			v.nameTex = 'x(n,\mu)';
			v.equationTex = 'x(n,\mu) = n m_p(\mu)';
			obj.addVariable(v);

			v = VariableClass(obj,'OD');
			v.comment = 'Optical density in the biorreactor.';
			v.units = 'OD';
			v.isSubstitution=true;
			e = EquationClass(obj,'OD_eq');
			e.eqn = 'OD ==  N/nOD';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.title = 'Optical density';
			v.nameTex = 'x_{OD}(n)';
			v.equationTex = 'x_{OD}(n) = n / n_{OD}';
			v.isTex = false;
			obj.addVariable(v);

			v = VariableClass(obj,'s');
			v.comment = 'Concentration of substrate in the biorreactor.';
			v.units = 'g \cdot L^{-1}';
			v.start = 3.6;
			v.title = 'Substrate concentration $s$';
			v.nameTex = 's';
			v.equationTex = '\dot s &= \frac{F_{in}}{V} (s_{feed} - s) - y^{-1} \mu x(n,\mu)';
			obj.addVariable(v);

			v = VariableClass(obj,'S');
			v.units = 'g';
			v.comment = 'Total mass of substrate removed from the bioreactor.';
			v.title = 'S';
			v.isTex = false;
			obj.addVariable(v);

			e = EquationClass(obj,'');
			e.eqn = 'der_V == F_in - F_out';
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'der_V_feed == F_in';
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'der_V_out == F_out';
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'der_N == mu*N - F_in/V*N';
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'der_s == F_in/V*(s_f - s) - (1/y)*mu*x ';
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'der_S == F_out*s';
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'F_in == 0';
			e.isSubstitution = true;
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'F_out == 0';
			e.isSubstitution = true;
			obj.addEquation(e);

			obj.namespace = '';


			e = EquationClass(obj,'');
			e.eqn = 'bio__mu == cellModel__mu';
			e.isSubstitution = true;
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'bio__m_p == cellModel__m_sum';
			e.isSubstitution = true;
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'cellModel__s == bio__s';
			e.isSubstitution = true;
			obj.addEquation(e);

			end

			if (strcmp(opts.bioreactor, 'fedbatch'))

			obj.namespace = 'bio';

			v = VariableClass(obj,'m_p');
			v.units = 'fg';
			v.comment = 'Total protein mass of the cell.';
			v.isPlot = false;
			v.isTex = false;
			obj.addVariable(v);

			v = VariableClass(obj,'mu');
			v.units = '1/min';
			v.comment = 'Growth rate.';
			v.title='Growth rate';
			v.ylabel='[min$^{-1}$]';
			v.ylim = [0 0.03];
			v.isTex = false;
			obj.addVariable(v);

			v = VariableClass(obj,'F_in');
			v.comment = 'Input media flux.';
			v.units = 'L \cdot min^{-1}';
			v.isPlot = false;
			v.nameTex = 'F_{in}';
			obj.addVariable(v);

			v = VariableClass(obj,'F_out');
			v.comment = 'Output waste flux.';
			v.units = 'L \cdot min^{-1}';
			v.isPlot = false;
			v.nameTex = 'F_{out}';
			obj.addVariable(v);

			p = ParameterClass(obj,'y');
			p.comment = 'Biomass yield on glucose.';
			p.units = 'g^{ }_{biomass} \cdot g^{-1}_{substrate}';
			p.value = 0.45;
			p.nameTex = 'y';
			p.reference = '\cite{Link2008}';
			obj.addParameter(p);

			p = ParameterClass(obj,'s_f');
			p.comment = 'Fresh media substrate concentration.';
			p.units = 'g \cdot L^{-1}';
			p.value = 3.6;
			p.nameTex = 's_{feed}';
			p.reference = '\cite{Zhuang2013}';
			obj.addParameter(p);

			p = ParameterClass(obj,'nOD');
			p.comment = 'Concentration of E.Coli. cells in 1 OD (Optical density).';
			p.units = 'cell \cdot L^{-1}';
			p.value = 1e12;
			p.nameTex = 'n_{OD}';
			p.valueTex = '1e12';
			p.isTex = false;
			obj.addParameter(p);

			v = VariableClass(obj,'V');
			v.comment = 'Volume of culture in the biorreactor.';
			v.units = 'L';
			v.start = 1;
			v.title = 'Volume';
			v.nameTex = 'V';
			v.equationTex =  '\dot V &= F_{in} - F_{out}';
			obj.addVariable(v);

			v = VariableClass(obj,'V_feed');
			v.units = 'L';
			v.comment = 'Total volume feeded to the bioreactor.';
			v.title = '$V_{feed}$';
			v.isTex = false;
			obj.addVariable(v);

			v = VariableClass(obj,'V_out');
			v.units = 'L';
			v.comment = 'Total volume removed from the bioreactor.';
			v.title = '$V_{out}$';
			v.isTex = false;
			obj.addVariable(v);

			v = VariableClass(obj,'N');
			v.comment = 'Concentration of cells in the biorreactor.';
			v.units = 'cell \cdot L^{-1}';
			v.title = 'Concentration of cells $n$';
			v.start = 5e10;
			v.nameTex = 'n';
			v.equationTex = '\dot n &= \mu n - \frac{F_{in}}{V} n';
			obj.addVariable(v);

			v = VariableClass(obj,'x');
			v.comment = 'Concentration of biomass in the biorreactor.';
			v.units = 'g/L';
			v.isSubstitution=true;
			e = EquationClass(obj,'x_eq');
			e.eqn = 'x ==  N*m_p*1e-15';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.title = 'Biomass concentration $x$';
			v.nameTex = 'x(n,\mu)';
			v.equationTex = 'x(n,\mu) = n m_p(\mu)';
			obj.addVariable(v);

			v = VariableClass(obj,'OD');
			v.comment = 'Optical density in the biorreactor.';
			v.units = 'OD';
			v.isSubstitution=true;
			e = EquationClass(obj,'OD_eq');
			e.eqn = 'OD ==  N/nOD';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.title = 'Optical density';
			v.nameTex = 'x_{OD}(n)';
			v.equationTex = 'x_{OD}(n) = n / n_{OD}';
			v.isTex = false;
			obj.addVariable(v);

			v = VariableClass(obj,'s');
			v.comment = 'Concentration of substrate in the biorreactor.';
			v.units = 'g \cdot L^{-1}';
			v.start = 3.6;
			v.title = 'Substrate concentration $s$';
			v.nameTex = 's';
			v.equationTex = '\dot s &= \frac{F_{in}}{V} (s_{feed} - s) - y^{-1} \mu x(n,\mu)';
			obj.addVariable(v);

			v = VariableClass(obj,'S');
			v.units = 'g';
			v.comment = 'Total mass of substrate removed from the bioreactor.';
			v.title = 'S';
			v.isTex = false;
			obj.addVariable(v);

			e = EquationClass(obj,'');
			e.eqn = 'der_V == F_in - F_out';
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'der_V_feed == F_in';
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'der_V_out == F_out';
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'der_N == mu*N - F_in/V*N';
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'der_s == F_in/V*(s_f - s) - (1/y)*mu*x ';
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'der_S == F_out*s';
			obj.addEquation(e);

			p = ParameterClass(obj,'V_final');
			p.comment = 'Final desired volume.';
			p.units = 'L';
			p.value = 10;
			obj.addParameter(p);

			obj.getModelPartByName('s_f').value = 180.156;

			e = EquationClass(obj,'');
			e.eqn = 'F_in == ((1/y)*mu*x*V/(s_f-s)) * (heaviside(V - 0)*(1 - heaviside(V - V_final)))';
			e.isSubstitution = true;
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'F_out == 0';
			e.isSubstitution = true;
			obj.addEquation(e);

			obj.namespace = '';


			e = EquationClass(obj,'');
			e.eqn = 'bio__mu == cellModel__mu';
			e.isSubstitution = true;
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'bio__m_p == cellModel__m_sum';
			e.isSubstitution = true;
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'cellModel__s == bio__s';
			e.isSubstitution = true;
			obj.addEquation(e);

			end

			if (strcmp(opts.bioreactor, 'continous'))

			obj.namespace = 'bio';

			v = VariableClass(obj,'m_p');
			v.units = 'fg';
			v.comment = 'Total protein mass of the cell.';
			v.isPlot = false;
			v.isTex = false;
			obj.addVariable(v);

			v = VariableClass(obj,'mu');
			v.units = '1/min';
			v.comment = 'Growth rate.';
			v.title='Growth rate';
			v.ylabel='[min$^{-1}$]';
			v.ylim = [0 0.03];
			v.isTex = false;
			obj.addVariable(v);

			v = VariableClass(obj,'F_in');
			v.comment = 'Input media flux.';
			v.units = 'L \cdot min^{-1}';
			v.isPlot = false;
			v.nameTex = 'F_{in}';
			obj.addVariable(v);

			v = VariableClass(obj,'F_out');
			v.comment = 'Output waste flux.';
			v.units = 'L \cdot min^{-1}';
			v.isPlot = false;
			v.nameTex = 'F_{out}';
			obj.addVariable(v);

			p = ParameterClass(obj,'y');
			p.comment = 'Biomass yield on glucose.';
			p.units = 'g^{ }_{biomass} \cdot g^{-1}_{substrate}';
			p.value = 0.45;
			p.nameTex = 'y';
			p.reference = '\cite{Link2008}';
			obj.addParameter(p);

			p = ParameterClass(obj,'s_f');
			p.comment = 'Fresh media substrate concentration.';
			p.units = 'g \cdot L^{-1}';
			p.value = 3.6;
			p.nameTex = 's_{feed}';
			p.reference = '\cite{Zhuang2013}';
			obj.addParameter(p);

			p = ParameterClass(obj,'nOD');
			p.comment = 'Concentration of E.Coli. cells in 1 OD (Optical density).';
			p.units = 'cell \cdot L^{-1}';
			p.value = 1e12;
			p.nameTex = 'n_{OD}';
			p.valueTex = '1e12';
			p.isTex = false;
			obj.addParameter(p);

			v = VariableClass(obj,'V');
			v.comment = 'Volume of culture in the biorreactor.';
			v.units = 'L';
			v.start = 1;
			v.title = 'Volume';
			v.nameTex = 'V';
			v.equationTex =  '\dot V &= F_{in} - F_{out}';
			obj.addVariable(v);

			v = VariableClass(obj,'V_feed');
			v.units = 'L';
			v.comment = 'Total volume feeded to the bioreactor.';
			v.title = '$V_{feed}$';
			v.isTex = false;
			obj.addVariable(v);

			v = VariableClass(obj,'V_out');
			v.units = 'L';
			v.comment = 'Total volume removed from the bioreactor.';
			v.title = '$V_{out}$';
			v.isTex = false;
			obj.addVariable(v);

			v = VariableClass(obj,'N');
			v.comment = 'Concentration of cells in the biorreactor.';
			v.units = 'cell \cdot L^{-1}';
			v.title = 'Concentration of cells $n$';
			v.start = 5e10;
			v.nameTex = 'n';
			v.equationTex = '\dot n &= \mu n - \frac{F_{in}}{V} n';
			obj.addVariable(v);

			v = VariableClass(obj,'x');
			v.comment = 'Concentration of biomass in the biorreactor.';
			v.units = 'g/L';
			v.isSubstitution=true;
			e = EquationClass(obj,'x_eq');
			e.eqn = 'x ==  N*m_p*1e-15';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.title = 'Biomass concentration $x$';
			v.nameTex = 'x(n,\mu)';
			v.equationTex = 'x(n,\mu) = n m_p(\mu)';
			obj.addVariable(v);

			v = VariableClass(obj,'OD');
			v.comment = 'Optical density in the biorreactor.';
			v.units = 'OD';
			v.isSubstitution=true;
			e = EquationClass(obj,'OD_eq');
			e.eqn = 'OD ==  N/nOD';
			e.isSubstitution = true;
			obj.addEquation(e);
			v.title = 'Optical density';
			v.nameTex = 'x_{OD}(n)';
			v.equationTex = 'x_{OD}(n) = n / n_{OD}';
			v.isTex = false;
			obj.addVariable(v);

			v = VariableClass(obj,'s');
			v.comment = 'Concentration of substrate in the biorreactor.';
			v.units = 'g \cdot L^{-1}';
			v.start = 3.6;
			v.title = 'Substrate concentration $s$';
			v.nameTex = 's';
			v.equationTex = '\dot s &= \frac{F_{in}}{V} (s_{feed} - s) - y^{-1} \mu x(n,\mu)';
			obj.addVariable(v);

			v = VariableClass(obj,'S');
			v.units = 'g';
			v.comment = 'Total mass of substrate removed from the bioreactor.';
			v.title = 'S';
			v.isTex = false;
			obj.addVariable(v);

			e = EquationClass(obj,'');
			e.eqn = 'der_V == F_in - F_out';
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'der_V_feed == F_in';
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'der_V_out == F_out';
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'der_N == mu*N - F_in/V*N';
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'der_s == F_in/V*(s_f - s) - (1/y)*mu*x ';
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'der_S == F_out*s';
			obj.addEquation(e);

			p = ParameterClass(obj,'x_ref');
			p.comment = 'Desired biomass concentration.';
			p.units = 'g L^-1';
			p.value = 1;
			obj.addParameter(p);

			p = ParameterClass(obj,'V_final');
			p.comment = 'Final total desired volume we want to use.';
			p.units = 'L';
			p.value = 10;
			obj.addParameter(p);

			v = VariableClass(obj,'D');
			v.comment = 'Dilution rate.';
			v.units = 'adim';
			v.start = 0.0;
			v.isPlot = false;
			obj.addVariable(v);

			e = EquationClass(obj,'');
			e.eqn = 'D == mu*x/x_ref';
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'F_in == D*V * (1 - heaviside(V+V_feed - V_final))';
			e.isSubstitution = true;
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'F_out == D*V * (1 - heaviside(V+V_feed - V_final))';
			e.isSubstitution = true;
			obj.addEquation(e);

			obj.namespace = '';


			e = EquationClass(obj,'');
			e.eqn = 'bio__mu == cellModel__mu';
			e.isSubstitution = true;
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'bio__m_p == cellModel__m_sum';
			e.isSubstitution = true;
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'cellModel__s == bio__s';
			e.isSubstitution = true;
			obj.addEquation(e);

			end

			if (strcmp(opts.cellModel, 'oneProtein') && ~strcmp(opts.bioreactor, 'substrateFix'))

			obj.namespace = 'pro';

			v = VariableClass(obj,'F_out');
			v.units = 'L/min';
			v.comment = 'Output media flux';
			v.isPlot = false;
			v.isTex = false;
			obj.addVariable(v);

			v = VariableClass(obj,'N');
			v.units = 'cells/L';
			v.comment = 'Concentration of cells in the biorreactor.';
			v.isPlot = false;
			v.isTex = false;
			obj.addVariable(v);

			v = VariableClass(obj,'m_A');
			v.units = 'fg';
			v.comment = 'Protein mass invested as protein A in a cell.';
			v.isPlot = false;
			v.isTex = false;
			obj.addVariable(v);

			v = VariableClass(obj,'M_A');
			v.units = 'g';
			v.comment = 'Total mass of protein A removed from the bioreactor.';
			v.isTex = false;
			v.isPlot = false;
			v.title = '$M_A$';
			obj.addVariable(v);

			e = EquationClass(obj,'');
			e.eqn = 'der_M_A == F_out*m_A*N';
			obj.addEquation(e);

			obj.namespace = '';


			e = EquationClass(obj,'');
			e.eqn = 'pro__F_out == bio__F_out';
			e.isSubstitution = true;
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'pro__N == bio__N';
			e.isSubstitution = true;
			obj.addEquation(e);

			e = EquationClass(obj,'');
			e.eqn = 'pro__m_A == cellModel__m_A*1e-15';
			e.isSubstitution = true;
			obj.addEquation(e);

			end

			obj.checkValidModel();
		end

	end
	methods(Static)
		function [out] = isUpToDate()
			dependenciesPath = {...
				'./model/multiscale.mc'...
				'./model/wildType/dynamic.mc'...
				'./model/syntheticCircuit/oneProtein.mc'...
				'./model/massEquation/massInterpolated.mc'...
				'./model/massEquation/massEqJesus.mc'...
				'./model/bioreactor/bioreactor.mc'...
				'./model/bioreactor/batch.mc'...
				'./model/bioreactor/fedbatch.mc'...
				'./model/bioreactor/continous.mc'...
				'./model/productivity/productivity.mc'...
				'./model/wildType/param.mc'...
			};
			out = multiscale.checkUpToDate(dependenciesPath);
		end
	end
end
